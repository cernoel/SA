/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import beans.Favorite;
import beans.Poi;
import beans.Shop;
import database.DB_Access;
import fileio.IO_Favorite;
import java.awt.EventQueue;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author plex
 */
public class window_main extends javax.swing.JFrame {

    List<String> Categories = new ArrayList<>();
    List<Poi> PointOfInterest = new ArrayList<>();
    List<String> Favorites = new ArrayList<>();
    private List<Favorite> favoritesList = null;

    /**
     * Creates new form main
     */
    public window_main() {
        initComponents();
        getCat();
        fillcmbPOIs();
        fillFavorites();
        this.setLocationRelativeTo(null); // sets windows into the midst of the screen
    }
//Gets the POIs in Combobox 

    private void fillcmbPOIs() {
        DB_Access db = null;
        try {
            db = new DB_Access();
        } catch (SQLException ex) {
            simple_dialog.infoBox("Problem mit Datenbankverbindung!");
        }

        try {
            PointOfInterest = db.getAllPOIs();
        } catch (SQLException ex) {
            simple_dialog.infoBox("Fehler beim lesen der POIs!");
        }

        // We do this, because we dont know if there aren't double entries.
        // so we store a counter, which should be the same es the combobox id
        cmbPointsOfInterests.removeAllItems();
        cmbPointsOfInterests.addItem("");
        int i = 1;
        for (Poi poi : PointOfInterest) {
            poi.setCounter(i);
            cmbPointsOfInterests.addItem(poi.getName());
            i++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtShopname = new javax.swing.JTextField();
        cmbCategories = new javax.swing.JComboBox<>();
        cmbPointsOfInterests = new javax.swing.JComboBox<>();
        cmbFavorites = new javax.swing.JComboBox<>();
        btnSaveToFave = new javax.swing.JButton();
        btnSelectFavorite = new javax.swing.JButton();
        sldDistance = new javax.swing.JSlider();
        txtDistance = new javax.swing.JTextField();
        btnSearch1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnNewShop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        txtShopname.setToolTipText("");
        txtShopname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShopnameActionPerformed(evt);
            }
        });

        cmbCategories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoriesActionPerformed(evt);
            }
        });

        cmbPointsOfInterests.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPointsOfInterests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPointsOfInterestsActionPerformed(evt);
            }
        });

        cmbFavorites.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbFavorites.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFavoritesActionPerformed(evt);
            }
        });

        btnSaveToFave.setText("Suche als Favorit speichern");
        btnSaveToFave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveToFaveMouseClicked(evt);
            }
        });

        btnSelectFavorite.setText("Select Favorite");
        btnSelectFavorite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSelectFavoriteMouseClicked(evt);
            }
        });

        sldDistance.setMajorTickSpacing(1);
        sldDistance.setMaximum(10000);
        sldDistance.setMinorTickSpacing(1);
        sldDistance.setValue(100);
        sldDistance.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldDistanceStateChanged(evt);
            }
        });

        txtDistance.setEditable(false);
        txtDistance.setText("100");

        btnSearch1.setText("Suche");
        btnSearch1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearch1MouseClicked(evt);
            }
        });

        jLabel1.setText("Shopsuche");

        jLabel2.setText("Kategorie");

        jLabel3.setText("Point of Interest");

        jLabel4.setText("Distanz");

        jLabel5.setText("Gespeicherte Favoriten");

        btnNewShop.setText("Neuen Shop hinzuf√ºgen");
        btnNewShop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewShopMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbPointsOfInterests, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSaveToFave, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addComponent(btnSelectFavorite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearch1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sldDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addComponent(cmbCategories, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtShopname)
                    .addComponent(cmbFavorites, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnNewShop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtShopname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbPointsOfInterests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sldDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addComponent(btnSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSaveToFave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewShop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbFavorites, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectFavorite)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtShopnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShopnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtShopnameActionPerformed

    private void cmbCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoriesActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbCategoriesActionPerformed

    private void cmbCategoriesComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_cmbCategoriesComponentAdded
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbCategoriesComponentAdded

    private void cmbCategoriesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cmbCategoriesAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCategoriesAncestorAdded

    private void btnSaveToFaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveToFaveMouseClicked
        // TODO add your handling code here:
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                String Name = txtShopname.getText();
                String Cat = cmbCategories.getSelectedItem().toString();
                String PoiName = "";
                Integer poiid = 0;

                Integer Distance = Integer.parseInt(txtDistance.getText());

                //drauf achten was passiert wenn nichts ausgew√§hlt ist
                if ((cmbPointsOfInterests.getSelectedIndex() > 0)) {
                    poiid = cmbPointsOfInterests.getSelectedIndex();
                    PoiName = cmbPointsOfInterests.getSelectedItem().toString();
                }
                
                try {
                    System.out.println("called fav win!");
                    window_favorite_editor favorite_editor = 
                    new window_favorite_editor(poiid, PoiName, Name, Cat,
                    Distance, "You can enter your Comment here");
                    favorite_editor.show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
 
            }
   
        });
    
    }//GEN-LAST:event_btnSaveToFaveMouseClicked

    private void cmbPointsOfInterestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPointsOfInterestsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPointsOfInterestsActionPerformed

    private void sldDistanceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldDistanceStateChanged
        // TODO add your handling code here:
        txtDistance.setText(Integer.toString(sldDistance.getValue()));

    }//GEN-LAST:event_sldDistanceStateChanged

    private void btnSelectFavoriteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectFavoriteMouseClicked
        // TODO add your handling code here:
        getInfoFromFavorite();
    }//GEN-LAST:event_btnSelectFavoriteMouseClicked

    private void cmbFavoritesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFavoritesActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbFavoritesActionPerformed

    private void btnSearch1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearch1MouseClicked
        // TODO add your handling code here:

        DB_Access db = null;
        try {
            db = new DB_Access();
        } catch (SQLException ex) {
            simple_dialog.infoBox("Problem mit Datenbankverbindung!");
            return;
        }

        // The cmbobox id should be the same as the poiid
        // String poiid = PointOfInterest.get(cmbPointsOfInterests.getSelectedIndex()).getId();
        // Otherwise we have saved the counter in the POI.
        String poiid = "";
        for (Poi poi : PointOfInterest) {
            if (poi.getCounter() == cmbPointsOfInterests.getSelectedIndex()) {
                poiid = poi.getId();
            }
        }

        List<Shop> shops = null;
        try {
            shops = db.filterShops(cmbCategories.getItemAt(cmbCategories.getSelectedIndex()),
                    txtShopname.getText(),
                    poiid,
                    sldDistance.getValue());
        } catch (SQLException ex) {
            simple_dialog.infoBox("Problem mit Datenbankabfrage");
            return;
        }

        // make final
        final List<Shop> shoplist = shops;

        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    window_shop_table wst = new window_shop_table(shoplist);
                    wst.show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }//GEN-LAST:event_btnSearch1MouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formFocusGained

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        fillFavorites();
        getCat();
    }//GEN-LAST:event_formWindowGainedFocus

    private void btnNewShopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewShopMouseClicked
         // TODO add your handling code here:
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    window_shop_edit wse = new window_shop_edit("0");
                    wse.show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }//GEN-LAST:event_btnNewShopMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(window_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(window_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(window_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(window_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new window_main().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewShop;
    private javax.swing.JButton btnSaveToFave;
    private javax.swing.JButton btnSearch1;
    private javax.swing.JButton btnSelectFavorite;
    private javax.swing.JComboBox<String> cmbCategories;
    private javax.swing.JComboBox<String> cmbFavorites;
    private javax.swing.JComboBox<String> cmbPointsOfInterests;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSlider sldDistance;
    private javax.swing.JTextField txtDistance;
    private javax.swing.JTextField txtShopname;
    // End of variables declaration//GEN-END:variables

    //------Fill The Categorys Combobox --------
    public void getCat() {
        DB_Access InitCat = null;
        try {
            InitCat = new DB_Access();
        } catch (SQLException ex) {
            //TODO: Catch error
        }

        try {
            Categories = InitCat.getAllCategories();
        } catch (SQLException ex) {
            //TODO: Catch error
        }

        //Removes the preset items and puts the new in place
        cmbCategories.removeAllItems();
        cmbCategories.addItem("");
        for (String cat : Categories) {
            cmbCategories.addItem(cat);
        }

    }

    //----------- Fills the Combobox cmdFavorites
    public void fillFavorites() {
        cmbFavorites.removeAllItems();
        IO_Favorite io = new IO_Favorite(); // defaults to favorites.json
        favoritesList = io.getFavorites();

        cmbFavorites.addItem("");
        for (Favorite fav : favoritesList) {
            cmbFavorites.addItem(fav.getEntryname());
        }

    }

    ;
    
    
    ////TODO: the Text Fields and Comboboxes get filled with the content of the chochsen Favorite
    // the Favorites are read from the Json file
    
    
 
    
    
    
    
    
    
    public void getInfoFromFavorite() {

        // selects also the entered text
        String selected = cmbFavorites.getItemAt(cmbFavorites.getSelectedIndex());
        //  ui.simple_dialog.infoBox(selected);

//  String FaveCategory = (String)
        boolean Favfound = false;

        for (final Favorite favorite : favoritesList) {
            if (favorite.getEntryname().equals(selected)) {
                Favfound = true;

                txtShopname.setText(favorite.getSearchstring());
                //    cmbPointsOfInterests.setText(favorite.getPoiid());
                txtDistance.setText(Integer.toString(favorite.getMeters()));
                //cmbCategrie 
                cmbPointsOfInterests.setSelectedIndex(favorite.getPOIIndex());
                if (!favorite.getCategory().isEmpty()) {
                    if (selectCategory(favorite.getCategory()) == false) {
                        simple_dialog.infoBox("Kategorie existiert nicht in der Datenbank. Abfrage ergibt somit keine Ergebnisse. "
                                + "Entweder Kategorie √§ndern oder Eintrag l√∂schen!");
                    }
                } else {
                    selectCategory("");
                }

                break;
            }

        }
        if (Favfound == false) {
            simple_dialog.infoBox("Favorit '" + selected + "' existiert nicht in den Favoriten. Um ihn anzulegen, einfach auf speichern klicken!");
        }

    }

    private void selectCategory(int index) {
        cmbCategories.setSelectedIndex(index);
    }

    private boolean selectCategory(String category) {
        for (int i = 1; i < cmbCategories.getItemCount(); i++) {
            if (category.equals(cmbCategories.getItemAt(i))) {
                cmbCategories.setSelectedIndex(i);
                return true;
            }
        }
        // TODO: empty entry?
        cmbCategories.setSelectedIndex(0);
        return false;
    }

    /* public void getPOI()
  {
     DB_Access InitPOID = new DB_Access();
     PointOfInterest = ;
  
  }*/
}
