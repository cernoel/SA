{"ast":null,"code":"import { cloneDeep } from './util/cloneDeep';\nimport { checkDocument, getOperationDefinitionOrDie, getFragmentDefinitions, createFragmentMap } from './getFromAST';\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\n\nfunction isNotEmpty(op, fragments) {\n  return op.selectionSet.selections.filter(function (selectionSet) {\n    return !(selectionSet && selectionSet.kind === 'FragmentSpread' && !isNotEmpty(fragments[selectionSet.name.value], fragments));\n  }).length > 0;\n}\n\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      if (dir.name && dir.name === directive.name.value) return true;\n      if (dir.test && dir.test(directive)) return true;\n      return false;\n    });\n  };\n}\n\nfunction addTypenameToSelectionSet(selectionSet, isRoot) {\n  if (isRoot === void 0) {\n    isRoot = false;\n  }\n\n  if (selectionSet.selections) {\n    if (!isRoot) {\n      var alreadyHasThisField = selectionSet.selections.some(function (selection) {\n        return selection.kind === 'Field' && selection.name.value === '__typename';\n      });\n\n      if (!alreadyHasThisField) {\n        selectionSet.selections.push(TYPENAME_FIELD);\n      }\n    }\n\n    selectionSet.selections.forEach(function (selection) {\n      if (selection.kind === 'Field') {\n        if (selection.name.value.lastIndexOf('__', 0) !== 0 && selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      } else if (selection.kind === 'InlineFragment') {\n        if (selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      }\n    });\n  }\n}\n\nfunction getSelectionsMatchingDirectiveFromSelectionSet(directives, selectionSet, invert, fieldsOnly) {\n  if (invert === void 0) {\n    invert = false;\n  }\n\n  if (fieldsOnly === void 0) {\n    fieldsOnly = false;\n  }\n\n  return selectionSet.selections.map(function (selection) {\n    if (selection.kind !== 'Field' || !selection || !selection.directives) {\n      return fieldsOnly ? null : selection;\n    }\n\n    var isMatch;\n    var directiveMatcher = getDirectiveMatcher(directives);\n    selection.directives = selection.directives.filter(function (directive) {\n      var shouldKeep = !directiveMatcher(directive);\n\n      if (!isMatch && !shouldKeep) {\n        isMatch = true;\n      }\n\n      return shouldKeep;\n    });\n    return isMatch && invert ? null : selection;\n  }).filter(function (s) {\n    return !!s;\n  });\n}\n\nfunction removeDirectivesFromSelectionSet(directives, selectionSet) {\n  if (!selectionSet.selections) return selectionSet;\n  var agressiveRemove = directives.some(function (dir) {\n    return dir.remove;\n  });\n  selectionSet.selections = getSelectionsMatchingDirectiveFromSelectionSet(directives, selectionSet, agressiveRemove);\n  selectionSet.selections.forEach(function (selection) {\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n  });\n  return selectionSet;\n}\n\nexport function removeDirectivesFromDocument(directives, doc) {\n  var docClone = cloneDeep(doc);\n  var removedArguments = [];\n  var removedFragments = [];\n  var aggressiveRemove = directives.some(function (directive) {\n    return directive.remove;\n  });\n  docClone.definitions.forEach(function (definition) {\n    var operationDefinition = definition;\n    var originalSelectionSet = cloneDeep(operationDefinition.selectionSet);\n    var newSelectionSet = removeDirectivesFromSelectionSet(directives, operationDefinition.selectionSet);\n\n    if (aggressiveRemove && !!docClone) {\n      var matchingSelections = getSelectionsMatchingDirectiveFromSelectionSet(directives.map(function (config) {\n        return {\n          name: config.name,\n          test: config.test\n        };\n      }), originalSelectionSet);\n      var remainingArguments_1 = getAllArgumentsFromSelectionSet(newSelectionSet);\n      removedArguments = removedArguments.concat(matchingSelections.map(getAllArgumentsFromSelection).reduce(function (allArguments, selectionArguments) {\n        return allArguments.concat(selectionArguments);\n      }, []).filter(function (removedArg) {\n        return !remainingArguments_1.some(function (remainingArg) {\n          if (remainingArg.value.kind !== 'Variable' || !remainingArg.value) return false;\n          if (removedArg.value.kind !== 'Variable' || !removedArg.value) return false;\n          return remainingArg.value.name.value === removedArg.value.name.value;\n        });\n      }).map(function (argument) {\n        if (argument.value.kind !== 'Variable' || !argument.value) return null;\n        return {\n          name: argument.value.name.value,\n          remove: aggressiveRemove\n        };\n      }).filter(function (node) {\n        return !!node;\n      }));\n      var remainingFragmentSpreads_1 = getAllFragmentSpreadsFromSelectionSet(newSelectionSet);\n      removedFragments = removedFragments.concat(matchingSelections.map(getAllFragmentSpreadsFromSelection).reduce(function (allFragments, selectionFragments) {\n        return allFragments.concat(selectionFragments);\n      }, []).filter(function (removedFragment) {\n        return !remainingFragmentSpreads_1.some(function (remainingFragment) {\n          return remainingFragment.name.value === removedFragment.name.value;\n        });\n      }).map(function (fragment) {\n        return {\n          name: fragment.name.value,\n          remove: aggressiveRemove\n        };\n      }));\n    }\n  });\n\n  if (!docClone) {\n    return null;\n  }\n\n  if (removedFragments.length > 0) {\n    docClone = removeFragmentSpreadFromDocument(removedFragments, docClone);\n\n    if (!docClone) {\n      return null;\n    }\n  }\n\n  if (removedArguments.length > 0) {\n    docClone = removeArgumentsFromDocument(removedArguments, docClone);\n\n    if (!docClone) {\n      return null;\n    }\n  }\n\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\nexport function addTypenameToDocument(doc) {\n  checkDocument(doc);\n  var docClone = cloneDeep(doc);\n  docClone.definitions.forEach(function (definition) {\n    var isRoot = definition.kind === 'OperationDefinition';\n    addTypenameToSelectionSet(definition.selectionSet, isRoot);\n  });\n  return docClone;\n}\nvar connectionRemoveConfig = {\n  test: function test(directive) {\n    var willRemove = directive.name.value === 'connection';\n\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        console.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  checkDocument(doc);\n  return removeDirectivesFromDocument([connectionRemoveConfig], doc);\n}\n\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  return filterSelectionSet(selectionSet, function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\n\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (selection.kind !== 'Field' || !selection) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  var directiveMatcher = getDirectiveMatcher(directives);\n  var matchedDirectives = selection.directives.filter(directiveMatcher);\n  var hasMatches = matchedDirectives.length > 0;\n  return hasMatches || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\n\nfunction getDirectivesFromSelectionSet(directives, selectionSet) {\n  selectionSet.selections = selectionSet.selections.filter(function (selection) {\n    return hasDirectivesInSelection(directives, selection, true);\n  }).map(function (selection) {\n    if (hasDirectivesInSelection(directives, selection, false)) {\n      return selection;\n    }\n\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      selection.selectionSet = getDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n\n    return selection;\n  });\n  return selectionSet;\n}\n\nexport function getDirectivesFromDocument(directives, doc, includeAllFragments) {\n  if (includeAllFragments === void 0) {\n    includeAllFragments = false;\n  }\n\n  checkDocument(doc);\n  var docClone = cloneDeep(doc);\n  docClone.definitions = docClone.definitions.map(function (definition) {\n    if ((definition.kind === 'OperationDefinition' || definition.kind === 'FragmentDefinition' && !includeAllFragments) && definition.selectionSet) {\n      definition.selectionSet = getDirectivesFromSelectionSet(directives, definition.selectionSet);\n    }\n\n    return definition;\n  });\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\n\nfunction getArgumentMatcher(config) {\n  return function (argument) {\n    return config.some(function (aConfig) {\n      if (argument.value.kind !== 'Variable' || !argument.value) return false;\n      if (!argument.value.name) return false;\n      if (aConfig.name === argument.value.name.value) return true;\n      if (aConfig.test && aConfig.test(argument)) return true;\n      return false;\n    });\n  };\n}\n\nfunction hasArgumentsInSelectionSet(config, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = false;\n  }\n\n  return filterSelectionSet(selectionSet, function (selection) {\n    return hasArgumentsInSelection(config, selection, nestedCheck);\n  });\n}\n\nfunction hasArgumentsInSelection(config, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = false;\n  }\n\n  if (selection.kind !== 'Field' || !selection) {\n    return true;\n  }\n\n  if (!selection.arguments) {\n    return false;\n  }\n\n  var matcher = getArgumentMatcher(config);\n  var matchedArguments = selection.arguments.filter(matcher);\n  return matchedArguments.length > 0 || nestedCheck && hasArgumentsInSelectionSet(config, selection.selectionSet, nestedCheck);\n}\n\nfunction getAllArgumentsFromSelectionSet(selectionSet) {\n  return selectionSet.selections.map(getAllArgumentsFromSelection).reduce(function (allArguments, selectionArguments) {\n    return allArguments.concat(selectionArguments);\n  }, []);\n}\n\nfunction getAllArgumentsFromSelection(selection) {\n  if (selection.kind !== 'Field' || !selection) {\n    return [];\n  }\n\n  return selection.arguments || [];\n}\n\nexport function removeArgumentsFromDocument(config, query) {\n  var docClone = cloneDeep(query);\n  docClone.definitions.forEach(function (definition) {\n    var operationDefinition = definition;\n    var removeVariableConfig = config.filter(function (aConfig) {\n      return !!aConfig.name;\n    }).map(function (aConfig) {\n      return {\n        name: aConfig.name,\n        remove: aConfig.remove\n      };\n    });\n    removeArgumentsFromSelectionSet(config, operationDefinition.selectionSet);\n    removeArgumentsFromOperationDefinition(removeVariableConfig, operationDefinition);\n  });\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\n\nfunction removeArgumentsFromOperationDefinition(config, definition) {\n  if (!definition.variableDefinitions) return definition;\n  var aggressiveRemove = config.some(function (aConfig) {\n    return aConfig.remove;\n  });\n  var remove;\n  definition.variableDefinitions = definition.variableDefinitions.filter(function (aDefinition) {\n    var shouldKeep = !config.some(function (aConfig) {\n      if (aConfig.name === aDefinition.variable.name.value) return true;\n      if (aConfig.test && aConfig.test(aDefinition)) return true;\n      return false;\n    });\n\n    if (!remove && !shouldKeep && aggressiveRemove) {\n      remove = true;\n    }\n\n    return shouldKeep;\n  });\n  return definition;\n}\n\nfunction removeArgumentsFromSelectionSet(config, selectionSet) {\n  if (!selectionSet.selections) return selectionSet;\n  var aggressiveRemove = config.some(function (aConfig) {\n    return aConfig.remove;\n  });\n  selectionSet.selections = selectionSet.selections.map(function (selection) {\n    if (selection.kind !== 'Field' || !selection || !selection.arguments) {\n      return selection;\n    }\n\n    var remove;\n    var argumentMatcher = getArgumentMatcher(config);\n    selection.arguments = selection.arguments.filter(function (argument) {\n      var shouldKeep = !argumentMatcher(argument);\n\n      if (!remove && !shouldKeep && aggressiveRemove) {\n        remove = true;\n      }\n\n      return shouldKeep;\n    });\n    return remove ? null : selection;\n  }).filter(function (x) {\n    return !!x;\n  });\n  selectionSet.selections.forEach(function (selection) {\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      removeArgumentsFromSelectionSet(config, selection.selectionSet);\n    }\n  });\n  return selectionSet;\n}\n\nfunction hasFragmentSpreadInSelection(config, selection) {\n  if (selection.kind !== 'FragmentSpread' || !selection) {\n    return false;\n  }\n\n  return config.some(function (aConfig) {\n    if (aConfig.name === selection.name.value) return true;\n    if (aConfig.test && aConfig.test(selection)) return true;\n    return false;\n  });\n}\n\nexport function removeFragmentSpreadFromDocument(config, query) {\n  var docClone = cloneDeep(query);\n  docClone.definitions.forEach(function (definition) {\n    removeFragmentSpreadFromSelectionSet(config, definition.selectionSet);\n  });\n  docClone.definitions = removeFragmentSpreadFromDefinitions(config.filter(function (aConfig) {\n    return !!aConfig.name;\n  }).map(function (aConfig) {\n    return {\n      name: aConfig.name\n    };\n  }), docClone.definitions);\n  var operation = getOperationDefinitionOrDie(docClone);\n  var fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\n\nfunction removeFragmentSpreadFromDefinitions(config, definitions) {\n  return definitions.filter(function (definition) {\n    if (definition.kind !== 'FragmentDefinition' || !definition) {\n      return true;\n    }\n\n    return !config.some(function (aConfig) {\n      if (aConfig.name && aConfig.name === definition.name.value) return true;\n      if (aConfig.test && aConfig.test(definition)) return true;\n      return false;\n    });\n  });\n}\n\nfunction removeFragmentSpreadFromSelectionSet(config, selectionSet) {\n  if (!selectionSet.selections) return selectionSet;\n  selectionSet.selections = selectionSet.selections.filter(function (selection) {\n    return !hasFragmentSpreadInSelection(config, selection);\n  });\n  selectionSet.selections.forEach(function (selection) {\n    if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n      removeFragmentSpreadFromSelectionSet(config, selection.selectionSet);\n    }\n  });\n  return selectionSet;\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  return selectionSet.selections.map(getAllFragmentSpreadsFromSelection).reduce(function (allFragments, selectionFragments) {\n    return allFragments.concat(selectionFragments);\n  }, []);\n}\n\nfunction getAllFragmentSpreadsFromSelection(selection) {\n  if ((selection.kind === 'Field' || selection.kind === 'InlineFragment') && selection.selectionSet) {\n    return getAllFragmentSpreadsFromSelectionSet(selection.selectionSet);\n  } else if (selection.kind === 'FragmentSpread' && selection) {\n    return [selection];\n  }\n\n  return [];\n}\n\nfunction filterSelectionSet(selectionSet, filter) {\n  if (!(selectionSet && selectionSet.selections)) {\n    return false;\n  }\n\n  return selectionSet.selections.filter(filter).length > 0;\n}","map":null,"metadata":{},"sourceType":"module"}